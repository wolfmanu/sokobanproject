<?xml version="1.0" encoding="UTF-8"?>
<project name="Sokoban" default="build" basedir=".">
        <property name="src.dir" location="${basedir}/src" />
        <property name="generated.dir" location="${basedir}/generated" />
        <property name="build.dir" location="${basedir}/bin" />
        <property name="lib.dir" location="${basedir}/lib" />
        <property name="parser.dir" location="${basedir}/parser" />
        
        <property name="java.jdk.dir" location="${java.home}/../"/>
        <property name="cup.jar" location="${lib.dir}/java-cup-11.jar"/>
        <property name="cup.runtime.jar" location="${lib.dir}/java-cup-11-runtime.jar"/>
        <property name="jflex.jar" location="${lib.dir}/jflex-1.4.1.jar"/>
        
        <property name="server.port" value="2020" />
        <property name="keep.artifacts" value="false" />
        <property name="clientside.check" value="true" />
                
        <taskdef name="cup"  classname="java_cup.anttask.CUPTask"  classpath="${cup.jar}"       />
        <taskdef classname="JFlex.anttask.JFlexTask" name="jflex" classpath="${jflex.jar}" />
        
        <!--<property name="logging.config.file" location="${basedir}/logging.properties"/>-->
        
        <property name="debug" value="true" />
        <property name="debuglevel" value="source,lines,vars" />
        <property name="target" value="1.6" />
        <property name="source" value="1.6" />


        <path id="build.classpath">
                <pathelement location="${cup.runtime.jar}" />
        </path>

        <path id="run.classpath">
                <pathelement location="${cup.runtime.jar}" />
                <pathelement location="${java.jdk.dir}/lib/tools.jar" />
        </path>
        
        <target name="init">
                <mkdir dir="${build.dir}" />
                <mkdir dir="${dynamic.build.dir}" />
        </target>

        <target name="clean" description="Clean all">
                <delete dir="${build.dir}" />
                <delete includeemptydirs="true">
                    <fileset dir="${generated.dir}" includes="**/*"/>
                        <fileset dir="${dynamic.build.dir}" includes="**/*"/>
                </delete>
        </target>


        <target name="chk-artifacts">
                <uptodate property="generate-artifacts.notRequired" targetfile="${generated.dir}/.flagfile">
                        <srcfiles dir="${parser.dir}">
                                <include name="**/*.cup" />
                                <include name="**/*.lex" />
                        </srcfiles>
                </uptodate>
        </target>

        <target name="lex" unless="generate-artifacts.notRequired" depends="init">
                <jflex file="${parser.dir}/JHP.lex" destdir="${generated.dir}" />
                <jflex file="${parser.dir}/HTTP.lex" destdir="${generated.dir}" />
        </target>
        
        <target name="cup" unless="generate-artifacts.notRequired" depends="init, lex">
                <cup srcfile="${parser.dir}/JHP.cup" destdir="${generated.dir}"
                        parser="JHPCup"
                        symbols="JHPSym"
                        nosummary="true"
                        nopositions="true"
                        nowarn="true"
                />
                <cup srcfile="${parser.dir}/HTTP.cup" destdir="${generated.dir}"
                        parser="HTTPCup"
                        symbols="HTTPSym"
                        nosummary="true"
                        nopositions="true"
                        nowarn="true"
                />
        </target>

        
        <target name="generate-artifacts" unless="generate-artifacts.notRequired" depends="init, chk-artifacts, lex, cup">
                <touch file="${generated.dir}/.flagfile" />
        </target>

        <target name="build" depends="init, generate-artifacts" description="Build the sources">
                <javac debug="${debug}" debuglevel="${debuglevel}" source="${source}" target="${target}" destdir="${build.dir}">
                        <src path="${generated.dir}" />
                        <src path="${src.dir}" />
                        <classpath>
                                <path refid="build.classpath" />
                                <pathelement path="${build.dir}" />
                        </classpath>
                </javac>
        </target>

        <target name="run.server" depends="build">
                <echo>Running server on port ${server.port}</echo>
                <java classname="it.polito.let.http.Server" failonerror="true" fork="yes">
                        <arg value="${server.port}" />
                        <sysproperty key="jhp.server.keep.artifacts" value="${keep.artifacts}"/>
                        <sysproperty key="clientside.check" value="${clientside.check}"/>
                        <classpath>
                                <path refid="run.classpath" />
                                <pathelement path="${build.dir}" />
                        </classpath>
                </java>
        </target>
</project>

