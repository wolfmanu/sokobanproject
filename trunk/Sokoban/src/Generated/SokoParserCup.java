
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060102
// Thu May 07 12:52:52 CEST 2009
//----------------------------------------------------

package Generated;

import java.util.*;
import java_cup.runtime.*;
import source.SokoPieces.*;
import source.AzioneFor;
import source.AzioneIf;
import source.AzionePiazzamento;
import source.SokoPieces;
import source.ListaAzioni;
import source.TipoPiazzamento;
import source.TipoCondizione;
import source.Condizione;
import source.intVar;
import source.strVar;
import source.element;
import source.Azione;
import source.MapAndResult;
import source.Result;
import source.Assegnazione;

/** CUP v0.11a beta 20060102 generated parser.
  * @version Thu May 07 12:52:52 CEST 2009
  */
public class SokoParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SokoParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public SokoParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\013\004\000\002\013\004\000\002\015\007" +
    "\000\002\015\007\000\002\006\005\000\002\006\005\000" +
    "\002\007\005\000\002\007\005\000\002\014\005\000\002" +
    "\011\003\000\002\011\004\000\002\005\005\000\002\004" +
    "\005\000\002\004\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\016\016\000\002\020" +
    "\005\000\002\020\005\000\002\021\005\000\002\021\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\004\000\002\023\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\024\007\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\026\005\000\002\027\003\000\002\027\003\000\002\030" +
    "\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\010\004\012\012\004\013\005\001\002\000" +
    "\006\005\141\006\140\001\002\000\004\033\135\001\002" +
    "\000\004\002\134\001\002\000\004\013\005\001\002\000" +
    "\010\004\ufff5\012\ufff5\013\ufff5\001\002\000\004\012\004" +
    "\001\002\000\004\034\122\001\002\000\020\004\012\007" +
    "\017\010\025\014\023\015\031\016\027\017\033\001\002" +
    "\000\010\004\012\012\004\013\005\001\002\000\010\004" +
    "\ufff4\012\ufff4\013\ufff4\001\002\000\020\004\012\007\017" +
    "\010\025\014\023\015\031\016\027\017\033\001\002\000" +
    "\004\031\076\001\002\000\022\002\000\004\012\007\017" +
    "\010\025\014\023\015\031\016\027\017\033\001\002\000" +
    "\022\002\uffec\004\uffec\007\uffec\010\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\001\002\000\022\002\uffe7\004\uffe7\007" +
    "\uffe7\010\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\001\002" +
    "\000\004\031\uffd2\001\002\000\022\002\uffed\004\uffed\007" +
    "\uffed\010\uffed\014\uffed\015\uffed\016\uffed\017\uffed\001\002" +
    "\000\004\031\045\001\002\000\022\002\uffe8\004\uffe8\007" +
    "\uffe8\010\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\001\002" +
    "\000\004\031\uffd0\001\002\000\004\031\034\001\002\000" +
    "\004\031\uffd1\001\002\000\022\002\uffe9\004\uffe9\007\uffe9" +
    "\010\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\001\002\000" +
    "\004\031\uffcf\001\002\000\006\033\040\034\035\001\002" +
    "\000\006\032\uffcc\035\uffcc\001\002\000\004\035\043\001" +
    "\002\000\004\032\041\001\002\000\006\032\uffcd\035\uffcd" +
    "\001\002\000\004\036\042\001\002\000\024\002\uffd3\004" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\001\002\000\006\033\040\034\035\001\002\000" +
    "\004\032\uffce\001\002\000\004\034\046\001\002\000\016" +
    "\021\067\022\071\023\066\024\063\025\065\030\064\001" +
    "\002\000\004\032\050\001\002\000\016\007\017\010\025" +
    "\014\023\015\031\016\027\017\033\001\002\000\020\007" +
    "\uffd7\010\uffd7\011\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\001\002\000\020\007\uffd9\010\uffd9\011\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\001\002\000\020\007\017\010\025" +
    "\011\057\014\023\015\031\016\027\017\033\001\002\000" +
    "\020\007\uffd8\010\uffd8\011\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\001\002\000\020\007\uffd5\010\uffd5\011\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\001\002\000\020\007\uffd6" +
    "\010\uffd6\011\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\001" +
    "\002\000\004\010\061\001\002\000\020\007\uffd4\010\uffd4" +
    "\011\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\001\002\000" +
    "\004\036\062\001\002\000\024\002\uffcb\004\uffcb\007\uffcb" +
    "\010\uffcb\011\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\001" +
    "\002\000\006\033\uffdd\034\uffdd\001\002\000\006\033\uffdc" +
    "\034\uffdc\001\002\000\006\033\uffde\034\uffde\001\002\000" +
    "\006\033\uffe0\034\uffe0\001\002\000\006\033\uffe1\034\uffe1" +
    "\001\002\000\006\033\073\034\072\001\002\000\006\033" +
    "\uffdf\034\uffdf\001\002\000\006\032\uffe3\036\uffe3\001\002" +
    "\000\006\032\uffe2\036\uffe2\001\002\000\022\002\uffeb\004" +
    "\uffeb\007\uffeb\010\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\001\002\000\022\002\uffea\004\uffea\007\uffea\010\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\001\002\000\004\034\077" +
    "\001\002\000\004\020\115\001\002\000\004\036\101\001" +
    "\002\000\004\034\046\001\002\000\004\036\103\001\002" +
    "\000\004\034\104\001\002\000\006\026\114\027\113\001" +
    "\002\000\004\032\106\001\002\000\016\007\017\010\025" +
    "\014\023\015\031\016\027\017\033\001\002\000\020\007" +
    "\017\010\025\011\110\014\023\015\031\016\027\017\033" +
    "\001\002\000\004\007\111\001\002\000\004\036\112\001" +
    "\002\000\024\002\uffe6\004\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\001\002\000\004\032" +
    "\uffda\001\002\000\004\032\uffdb\001\002\000\006\033\117" +
    "\034\116\001\002\000\004\036\uffe5\001\002\000\004\036" +
    "\uffe4\001\002\000\022\002\uffff\004\012\007\017\010\025" +
    "\014\023\015\031\016\027\017\033\001\002\000\006\035" +
    "\ufff1\036\ufff1\001\002\000\010\020\127\035\uffee\036\uffee" +
    "\001\002\000\006\035\124\036\125\001\002\000\004\034" +
    "\122\001\002\000\026\002\ufff3\004\ufff3\007\ufff3\010\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\001" +
    "\002\000\006\035\ufff2\036\ufff2\001\002\000\006\033\131" +
    "\034\130\001\002\000\006\035\uffef\036\uffef\001\002\000" +
    "\006\035\ufff0\036\ufff0\001\002\000\020\004\ufffd\007\ufffd" +
    "\010\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\001\002\000" +
    "\020\004\ufffe\007\ufffe\010\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\001\002\000\004\002\001\001\002\000\004\036" +
    "\136\001\002\000\022\004\ufff6\007\ufff6\010\ufff6\012\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\001\002\000\004\035" +
    "\154\001\002\000\004\020\151\001\002\000\004\020\146" +
    "\001\002\000\004\035\143\001\002\000\004\006\140\001" +
    "\002\000\004\036\145\001\002\000\022\004\ufffc\007\ufffc" +
    "\010\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\001" +
    "\002\000\006\033\150\034\147\001\002\000\006\035\ufff9" +
    "\036\ufff9\001\002\000\006\035\ufffa\036\ufffa\001\002\000" +
    "\006\033\153\034\152\001\002\000\006\035\ufff7\036\ufff7" +
    "\001\002\000\006\035\ufff8\036\ufff8\001\002\000\004\005" +
    "\141\001\002\000\004\036\156\001\002\000\022\004\ufffb" +
    "\007\ufffb\010\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\016\002\005\005\007\011\013\013\012\014" +
    "\010\015\006\001\001\000\006\006\141\007\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\132\001" +
    "\001\000\002\001\001\000\004\015\131\001\001\000\006" +
    "\004\122\012\120\001\001\000\020\003\117\005\020\010" +
    "\023\016\031\024\025\025\027\030\021\001\001\000\012" +
    "\005\014\013\015\014\010\015\006\001\001\000\002\001" +
    "\001\000\020\003\017\005\020\010\023\016\031\024\025" +
    "\025\027\030\021\001\001\000\002\001\001\000\016\005" +
    "\073\010\074\016\031\024\025\025\027\030\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\036\027\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\043\001\001\000\002\001\001\000\004\021\046\001" +
    "\001\000\004\022\067\001\001\000\002\001\001\000\014" +
    "\016\053\017\052\024\051\025\027\030\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\057\024\055" +
    "\025\027\030\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\101\001\001\000\002\001\001\000\004" +
    "\023\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\053\017\106\024\051\025\027\030\050\001\001" +
    "\000\012\016\057\024\055\025\027\030\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\073\010\074\016\031" +
    "\024\025\025\027\030\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\154\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SokoParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SokoParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SokoParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static int syntax_error = 0;
	public static int semantic_error = 0;

	public void syntax_error(Symbol sym) {
		StringBuffer m = new StringBuffer("Syntax Error");

		if (sym.left != -1) {
			m.append(" (line " + (sym.left+1));   
			m.append(", column " + (sym.right+1) + ") ");
		}
		System.err.print(m);
	}

	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer("Error");
		m.append(" : " + message);
		if (info != null) {
			m.append(" (line " + (((java_cup.runtime.Symbol) info).left + 1) + ")");
		}
		System.err.println(m);
	}
	
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SokoParserCup$actions {


	Map<String, Integer> varMap = new HashMap<String, Integer>();
	
	SokoPieces[][] mappa=null;
	
	int SemanticErrorNumber=0;
	boolean error=false;
	//ArrayList<ListaAzioni> listaAzioniTot=new ArrayList<ListaAzioni>();


  private final SokoParserCup parser;

  /** Constructor */
  CUP$SokoParserCup$actions(SokoParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SokoParserCup$do_action(
    int                        CUP$SokoParserCup$act_num,
    java_cup.runtime.lr_parser CUP$SokoParserCup$parser,
    java.util.Stack            CUP$SokoParserCup$stack,
    int                        CUP$SokoParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SokoParserCup$result;

      /* select the action based on the action number */
      switch (CUP$SokoParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sezioneIF ::= IF TO termine TC contenuto END IF PV 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).value;
		
					if(t!=null){
						ArrayList<Azione> azlist=((ListaAzioni)c).getActions();
						if( ((Condizione)t).valute(varMap) ){
							Iterator<Azione> it=azlist.iterator();
							while(it.hasNext()){
								Azione az = it.next();
								if ( az instanceof AzioneFor){
									;
								}
								if ( az instanceof AzioneIf){
									;
								}
								if ( az instanceof AzionePiazzamento){
									AzionePiazzamento ap=(AzionePiazzamento)az;
									MapAndResult mar=ap.eseguiAzione(varMap, mappa);
									if (mar.result!=Result.OK){
										parser.report_error(mar.result.name(),null);
										SemanticErrorNumber++;
									}
									mappa=mar.mappa;
								}
							}
						}
					}
				
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(22/*sezioneIF*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // coordinata ::= ID 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=t; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(21/*coordinata*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // coordinata ::= INT 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=t; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(21/*coordinata*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // coppia ::= coordinata VIR coordinata 
            {
              Object RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 
				RESULT=new AzionePiazzamento(t1,t2);
			
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(20/*coppia*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= SOKO 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= GOAL 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= FISSI 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= MOB 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // piazzamento ::= tipo TO coppia TC PV 
            {
              Object RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		
					((AzionePiazzamento)cp).setType(t1);
					RESULT=cp;
				
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(18/*piazzamento*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // contenuto ::= contenuto cicloFor 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					((ListaAzioni)c).AddAzione(f);
					RESULT=c;
				
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // contenuto ::= contenuto sezioneIF 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					((ListaAzioni)c).AddAzione(i);
					RESULT=c;
				
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // contenuto ::= contenuto piazzamento 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					((ListaAzioni)c).AddAzione(p);
					RESULT=c;
				
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // contenuto ::= sezioneIF 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					RESULT=new ListaAzioni(i);
				
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contenuto ::= cicloFor 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					RESULT=new ListaAzioni(f);
				
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contenuto ::= piazzamento 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					RESULT=new ListaAzioni(p);
				
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // avanzamento ::= ID DECR 
            {
              Object RESULT = null;
		 RESULT=new Boolean(false); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(17/*avanzamento*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // avanzamento ::= ID INCR 
            {
              Object RESULT = null;
		 RESULT=new Boolean(true); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(17/*avanzamento*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // segno ::= DIVERSO 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(16/*segno*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // segno ::= MIN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(16/*segno*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // segno ::= MAG 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(16/*segno*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // segno ::= MINUG 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(16/*segno*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // segno ::= MAGUG 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(16/*segno*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // segno ::= UGUALEUGUALE 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(16/*segno*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // termine ::= ID segno INT 
            {
              Object RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
				if(!varMap.containsKey((String)id1)){
					parser.report_error(Result.UndefinedVariable.name(),null);
					SemanticErrorNumber++;
					error=true;
				}
				if(!error)
					RESULT=new Condizione(id1,id2,s);
				error=false;
				RESULT=null;
			
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(15/*termine*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // termine ::= ID segno ID 
            {
              Object RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
				if(!varMap.containsKey((String)id1)){
					parser.report_error(Result.UndefinedVariable.name(),null);
					SemanticErrorNumber++;
					error=true;
				}
				if(!varMap.containsKey((String)id2)){
					parser.report_error(Result.UndefinedVariable.name(),null);
					SemanticErrorNumber++;
					error=true;
				}
				if(!error)
					RESULT=new Condizione(id1,id2,s);
				error=false;
				RESULT=null;
			
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(15/*termine*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assegnazione ::= ID UGUALE INT 
            {
              Object RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					RESULT=new Assegnazione(id1, id2);
				
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(14/*assegnazione*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assegnazione ::= ID UGUALE ID 
            {
              Object RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					RESULT=new Assegnazione(id1, id2);
				
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(14/*assegnazione*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cicloFor ::= FOR TO assegnazione PV termine PV avanzamento TC contenuto END FOR PV 
            {
              Object RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-9)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-9)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).value;
		
					AzioneFor azione=new AzioneFor();
					azione.var=((Assegnazione)as).id1;
					azione.start=element.traduci(((Assegnazione)as).id2, varMap);
					azione.cond=(Condizione)t;
					azione.incremento=(Boolean)av;
					azione.la=(ListaAzioni)c;
					RESULT = azione;
				
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(12/*cicloFor*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-11)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // corpo ::= sezioneIF 
            {
              Object RESULT = null;
		System.out.println("corpo__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(6/*corpo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // corpo ::= piazzamento 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 
			AzionePiazzamento ap=(AzionePiazzamento)p;
			MapAndResult mar=ap.eseguiAzione(varMap, mappa);
			if (mar.result!=Result.OK){
				parser.report_error(mar.result.name(),null);
				SemanticErrorNumber++;
				error=true;
			}
			if(!error)
				mappa=mar.mappa;
			error=false;
		
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(6/*corpo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // corpo ::= cicloFor 
            {
              Object RESULT = null;
		System.out.println("corpo__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(6/*corpo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // part ::= part corpo 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(1/*part*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // part ::= part elemento 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(1/*part*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // part ::= elemento 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(1/*part*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // part ::= corpo 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(1/*part*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // definizione ::= ID 
            {
              Object RESULT = null;
		System.out.println("definizione3__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(8/*definizione*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definizione ::= ID UGUALE ID 
            {
              Object RESULT = null;
		System.out.println("definizione2__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(8/*definizione*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // definizione ::= ID UGUALE INT 
            {
              Object RESULT = null;
		System.out.println("definizione1__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(8/*definizione*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def ::= definizione 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(2/*def*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def ::= def VIR definizione 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(2/*def*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // elemento ::= VAR def PV 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(3/*elemento*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // definizioni ::= definizioni elemento 
            {
              Object RESULT = null;
		System.out.println("definizioni__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(7/*definizioni*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definizioni ::= elemento 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(7/*definizioni*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // numBlocchi ::= NMOB INT PV 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(10/*numBlocchi*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // larghezza ::= WIDTH UGUALE ID 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(5/*larghezza*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // larghezza ::= WIDTH UGUALE INT 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(5/*larghezza*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // altezza ::= HEIGHT UGUALE ID 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(4/*altezza*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // altezza ::= HEIGHT UGUALE INT 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(4/*altezza*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dimBlocchi ::= DIM larghezza VIR altezza PV 
            {
              Object RESULT = null;
		System.out.println("dimBlocchi__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(11/*dimBlocchi*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dimBlocchi ::= DIM altezza VIR larghezza PV 
            {
              Object RESULT = null;
		System.out.println("dimBlocchi__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(11/*dimBlocchi*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dichiar ::= numBlocchi dimBlocchi 
            {
              Object RESULT = null;
		System.out.println("dichiar2__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(9/*dichiar*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dichiar ::= dimBlocchi numBlocchi 
            {
              Object RESULT = null;
		System.out.println("dichiar1__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(9/*dichiar*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // map ::= dichiar part 
            {
              Object RESULT = null;
		System.out.println("map"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(0/*map*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // map ::= definizioni dichiar part 
            {
              Object RESULT = null;
		System.out.println("map"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(0/*map*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= map EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		RESULT = start_val;
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          /* ACCEPT */
          CUP$SokoParserCup$parser.done_parsing();
          return CUP$SokoParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

