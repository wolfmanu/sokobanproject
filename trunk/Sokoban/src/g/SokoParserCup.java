
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060102
// Mon May 04 12:12:04 CEST 2009
//----------------------------------------------------

package g;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060102 generated parser.
  * @version Mon May 04 12:12:04 CEST 2009
  */
public class SokoParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SokoParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public SokoParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\013\004\000\002\013\004\000\002\015\007" +
    "\000\002\015\007\000\002\006\005\000\002\006\005\000" +
    "\002\007\005\000\002\007\005\000\002\014\005\000\002" +
    "\011\003\000\002\011\004\000\002\005\005\000\002\004" +
    "\005\000\002\004\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\016\016\000\002\020" +
    "\005\000\002\020\005\000\002\021\005\000\002\021\005" +
    "\000\002\022\004\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\004\000\002\023\004\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\024\007" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\005\000\002\026\004\000\002" +
    "\027\003\000\002\027\003\000\002\030\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\010\004\012\012\004\013\005\001\002\000" +
    "\006\005\143\006\142\001\002\000\004\030\137\001\002" +
    "\000\004\002\136\001\002\000\004\013\005\001\002\000" +
    "\010\004\ufff5\012\ufff5\013\ufff5\001\002\000\004\012\004" +
    "\001\002\000\004\031\124\001\002\000\020\004\012\007" +
    "\017\010\025\014\023\015\031\016\027\017\033\001\002" +
    "\000\010\004\012\012\004\013\005\001\002\000\010\004" +
    "\ufff4\012\ufff4\013\ufff4\001\002\000\020\004\012\007\017" +
    "\010\025\014\023\015\031\016\027\017\033\001\002\000" +
    "\004\026\074\001\002\000\022\002\000\004\012\007\017" +
    "\010\025\014\023\015\031\016\027\017\033\001\002\000" +
    "\022\002\uffec\004\uffec\007\uffec\010\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\001\002\000\022\002\uffe7\004\uffe7\007" +
    "\uffe7\010\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\001\002" +
    "\000\004\026\uffd4\001\002\000\022\002\uffed\004\uffed\007" +
    "\uffed\010\uffed\014\uffed\015\uffed\016\uffed\017\uffed\001\002" +
    "\000\004\026\046\001\002\000\022\002\uffe8\004\uffe8\007" +
    "\uffe8\010\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\001\002" +
    "\000\004\026\uffd2\001\002\000\004\026\034\001\002\000" +
    "\004\026\uffd3\001\002\000\022\002\uffe9\004\uffe9\007\uffe9" +
    "\010\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\001\002\000" +
    "\004\026\uffd1\001\002\000\006\030\040\031\035\001\002" +
    "\000\010\003\uffcd\027\uffcd\032\uffcd\001\002\000\006\003" +
    "\043\032\044\001\002\000\004\027\041\001\002\000\010" +
    "\003\uffce\027\uffce\032\uffce\001\002\000\004\033\042\001" +
    "\002\000\024\002\uffd5\004\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\001\002\000\004\027" +
    "\uffcf\001\002\000\006\030\040\031\035\001\002\000\004" +
    "\027\uffd0\001\002\000\004\031\047\001\002\000\012\020" +
    "\054\021\053\022\051\025\050\001\002\000\006\030\uffde" +
    "\031\uffde\001\002\000\006\030\uffe0\031\uffe0\001\002\000" +
    "\006\030\040\031\035\001\002\000\006\030\uffdf\031\uffdf" +
    "\001\002\000\004\020\055\001\002\000\006\030\uffe1\031" +
    "\uffe1\001\002\000\004\027\057\001\002\000\016\007\017" +
    "\010\025\014\023\015\031\016\027\017\033\001\002\000" +
    "\020\007\uffd9\010\uffd9\011\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\001\002\000\020\007\uffdb\010\uffdb\011\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\001\002\000\020\007\017" +
    "\010\025\011\066\014\023\015\031\016\027\017\033\001" +
    "\002\000\020\007\uffda\010\uffda\011\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\001\002\000\020\007\uffd7\010\uffd7\011" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\001\002\000\020" +
    "\007\uffd8\010\uffd8\011\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\001\002\000\004\010\070\001\002\000\020\007\uffd6" +
    "\010\uffd6\011\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\001" +
    "\002\000\004\033\071\001\002\000\024\002\uffcc\004\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\001\002\000\022\002\uffeb\004\uffeb\007\uffeb\010\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\001\002\000\022\002" +
    "\uffea\004\uffea\007\uffea\010\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\001\002\000\004\031\075\001\002\000\004\020" +
    "\117\001\002\000\004\033\077\001\002\000\004\031\100" +
    "\001\002\000\012\020\054\021\053\022\051\025\050\001" +
    "\002\000\004\033\102\001\002\000\004\031\103\001\002" +
    "\000\006\023\113\024\112\001\002\000\004\027\105\001" +
    "\002\000\016\007\017\010\025\014\023\015\031\016\027" +
    "\017\033\001\002\000\020\007\017\010\025\011\107\014" +
    "\023\015\031\016\027\017\033\001\002\000\004\007\110" +
    "\001\002\000\004\033\111\001\002\000\024\002\uffe6\004" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\001\002\000\004\027\uffdc\001\002\000\004\027" +
    "\uffdd\001\002\000\006\030\116\031\115\001\002\000\004" +
    "\033\uffe3\001\002\000\004\033\uffe2\001\002\000\006\030" +
    "\121\031\120\001\002\000\004\033\uffe5\001\002\000\004" +
    "\033\uffe4\001\002\000\022\002\uffff\004\012\007\017\010" +
    "\025\014\023\015\031\016\027\017\033\001\002\000\006" +
    "\032\ufff1\033\ufff1\001\002\000\010\020\131\032\uffee\033" +
    "\uffee\001\002\000\006\032\126\033\127\001\002\000\004" +
    "\031\124\001\002\000\026\002\ufff3\004\ufff3\007\ufff3\010" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\001\002\000\006\032\ufff2\033\ufff2\001\002\000\006\030" +
    "\133\031\132\001\002\000\006\032\uffef\033\uffef\001\002" +
    "\000\006\032\ufff0\033\ufff0\001\002\000\020\004\ufffd\007" +
    "\ufffd\010\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\001\002" +
    "\000\020\004\ufffe\007\ufffe\010\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\001\002\000\004\002\001\001\002\000\004" +
    "\033\140\001\002\000\022\004\ufff6\007\ufff6\010\ufff6\012" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\001\002\000\004" +
    "\032\156\001\002\000\004\020\153\001\002\000\004\020" +
    "\150\001\002\000\004\032\145\001\002\000\004\006\142" +
    "\001\002\000\004\033\147\001\002\000\022\004\ufffc\007" +
    "\ufffc\010\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\001\002\000\006\030\152\031\151\001\002\000\006\032" +
    "\ufff9\033\ufff9\001\002\000\006\032\ufffa\033\ufffa\001\002" +
    "\000\006\030\155\031\154\001\002\000\006\032\ufff7\033" +
    "\ufff7\001\002\000\006\032\ufff8\033\ufff8\001\002\000\004" +
    "\005\143\001\002\000\004\033\160\001\002\000\022\004" +
    "\ufffb\007\ufffb\010\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\016\002\005\005\007\011\013\013\012\014" +
    "\010\015\006\001\001\000\006\006\143\007\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\134\001" +
    "\001\000\002\001\001\000\004\015\133\001\001\000\006" +
    "\004\124\012\122\001\001\000\020\003\121\005\020\010" +
    "\023\016\031\024\025\025\027\030\021\001\001\000\012" +
    "\005\014\013\015\014\010\015\006\001\001\000\002\001" +
    "\001\000\020\003\017\005\020\010\023\016\031\024\025" +
    "\025\027\030\021\001\001\000\002\001\001\000\016\005" +
    "\071\010\072\016\031\024\025\025\027\030\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\036\027\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\062\017\061\024\060\025\027\030\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\066" +
    "\024\064\025\027\030\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\100\001\001\000" +
    "\004\022\113\001\001\000\002\001\001\000\004\023\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\062\017\105\024\060\025\027\030\057\001\001\000\012" +
    "\016\066\024\064\025\027\030\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\071\010\072\016\031\024\025\025" +
    "\027\030\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\156\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SokoParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SokoParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SokoParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SokoParserCup$actions {
  private final SokoParserCup parser;

  /** Constructor */
  CUP$SokoParserCup$actions(SokoParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SokoParserCup$do_action(
    int                        CUP$SokoParserCup$act_num,
    java_cup.runtime.lr_parser CUP$SokoParserCup$parser,
    java.util.Stack            CUP$SokoParserCup$stack,
    int                        CUP$SokoParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SokoParserCup$result;

      /* select the action based on the action number */
      switch (CUP$SokoParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sezioneIF ::= IF TO ID segno coordinata TC contenuto END IF PV 
            {
              Object RESULT = null;
		System.out.println("sezioneIF"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(22/*sezioneIF*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-9)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // coordinata ::= ID 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=t
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(21/*coordinata*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // coordinata ::= INT 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=t
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(21/*coordinata*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // coppia ::= coordinata error 
            {
              Object RESULT = null;
		 parser.report_fatal_error("coppia errore",null); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(20/*coppia*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // coppia ::= coordinata VIR coordinata 
            {
              Object RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 
											Object[] t;
											t[0]=t1;
											t[1]=t2;
											RESULT=t; 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(20/*coppia*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= SOKO 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= GOAL 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= FISSI 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo ::= MOB 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(19/*tipo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // piazzamento ::= tipo TO coppia TC PV 
            {
              Object RESULT = null;
		System.out.println("piazzamento"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(18/*piazzamento*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // contenuto ::= contenuto cicloFor 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // contenuto ::= contenuto sezioneIF 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contenuto ::= contenuto piazzamento 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contenuto ::= sezioneIF 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // contenuto ::= cicloFor 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // contenuto ::= piazzamento 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(13/*contenuto*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // avanzamento ::= ID DECR 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(17/*avanzamento*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // avanzamento ::= ID INCR 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(17/*avanzamento*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // segno ::= DIVERSO 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(16/*segno*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // segno ::= MINUG 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(16/*segno*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // segno ::= MAGUG 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(16/*segno*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // segno ::= UGUALE UGUALE 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(16/*segno*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // termine ::= ID segno INT 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(15/*termine*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // termine ::= ID segno ID 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(15/*termine*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assegnazione ::= ID UGUALE INT 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(14/*assegnazione*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assegnazione ::= ID UGUALE ID 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(14/*assegnazione*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cicloFor ::= FOR TO assegnazione PV termine PV avanzamento TC contenuto END FOR PV 
            {
              Object RESULT = null;
		System.out.println("cicloFor"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(12/*cicloFor*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-11)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // corpo ::= sezioneIF 
            {
              Object RESULT = null;
		System.out.println("corpo__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(6/*corpo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // corpo ::= piazzamento 
            {
              Object RESULT = null;
		System.out.println("corpo__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(6/*corpo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // corpo ::= cicloFor 
            {
              Object RESULT = null;
		System.out.println("corpo__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(6/*corpo*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // part ::= part corpo 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(1/*part*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // part ::= part elemento 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(1/*part*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // part ::= elemento 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(1/*part*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // part ::= corpo 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(1/*part*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // definizione ::= ID 
            {
              Object RESULT = null;
		System.out.println("definizione3__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(8/*definizione*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definizione ::= ID UGUALE ID 
            {
              Object RESULT = null;
		System.out.println("definizione2__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(8/*definizione*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // definizione ::= ID UGUALE INT 
            {
              Object RESULT = null;
		System.out.println("definizione1__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(8/*definizione*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def ::= definizione 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(2/*def*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def ::= def VIR definizione 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(2/*def*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // elemento ::= VAR def PV 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(3/*elemento*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // definizioni ::= definizioni elemento 
            {
              Object RESULT = null;
		System.out.println("definizioni__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(7/*definizioni*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definizioni ::= elemento 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(7/*definizioni*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // numBlocchi ::= NMOB INT PV 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(10/*numBlocchi*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // larghezza ::= WIDTH UGUALE ID 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(5/*larghezza*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // larghezza ::= WIDTH UGUALE INT 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(5/*larghezza*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // altezza ::= HEIGHT UGUALE ID 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(4/*altezza*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // altezza ::= HEIGHT UGUALE INT 
            {
              Object RESULT = null;

              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(4/*altezza*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dimBlocchi ::= DIM larghezza VIR altezza PV 
            {
              Object RESULT = null;
		System.out.println("dimBlocchi__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(11/*dimBlocchi*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dimBlocchi ::= DIM altezza VIR larghezza PV 
            {
              Object RESULT = null;
		System.out.println("dimBlocchi__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(11/*dimBlocchi*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dichiar ::= numBlocchi dimBlocchi 
            {
              Object RESULT = null;
		System.out.println("dichiar2__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(9/*dichiar*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dichiar ::= dimBlocchi numBlocchi 
            {
              Object RESULT = null;
		System.out.println("dichiar1__"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(9/*dichiar*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // map ::= dichiar part 
            {
              Object RESULT = null;
		System.out.println("map"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(0/*map*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // map ::= definizioni dichiar part 
            {
              Object RESULT = null;
		System.out.println("map"); 
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(0/*map*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= map EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		RESULT = start_val;
              CUP$SokoParserCup$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right, RESULT);
            }
          /* ACCEPT */
          CUP$SokoParserCup$parser.done_parsing();
          return CUP$SokoParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

