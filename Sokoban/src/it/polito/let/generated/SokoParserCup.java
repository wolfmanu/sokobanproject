
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 06 17:22:35 CEST 2009
//----------------------------------------------------

package it.polito.let.generated;

import java.util.*;
import java_cup.runtime.*;
import it.polito.let.AzioneFor;
import it.polito.let.AzioneIf;
import it.polito.let.AzionePiazzamento;
import it.polito.let.SokoPieces;
import it.polito.let.ListaAzioni;
import it.polito.let.Condizione;
import it.polito.let.element;
import it.polito.let.MapAndResult;
import it.polito.let.Result;
import it.polito.let.Assegnazione;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 06 17:22:35 CEST 2009
  */
public class SokoParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SokoParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public SokoParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SokoParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\003\005\000\002\003" +
    "\004\000\002\014\004\000\002\014\004\000\002\016\007" +
    "\000\002\016\007\000\002\007\005\000\002\007\005\000" +
    "\002\010\005\000\002\010\005\000\002\015\005\000\002" +
    "\012\003\000\002\012\004\000\002\006\005\000\002\005" +
    "\005\000\002\005\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\004\000\002\017\016\000\002\017\016" +
    "\000\002\017\010\000\002\017\006\000\002\017\014\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\021\005\000\002\021\005\000\002\022\005\000\002\022" +
    "\005\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\005\000\002\024\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\025\007\000\002\025\004" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\027\005\000\002\030\003\000\002" +
    "\030\003\000\002\031\012\000\002\031\012\000\002\031" +
    "\010\000\002\031\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\010\004\012\012\004\013\005\001\002\000" +
    "\006\005\200\006\177\001\002\000\004\033\174\001\002" +
    "\000\004\002\173\001\002\000\004\013\005\001\002\000" +
    "\010\004\ufff5\012\ufff5\013\ufff5\001\002\000\004\012\004" +
    "\001\002\000\004\034\161\001\002\000\022\003\027\004" +
    "\012\007\017\010\025\014\023\015\032\016\030\017\034" +
    "\001\002\000\010\004\012\012\004\013\005\001\002\000" +
    "\010\004\ufff4\012\ufff4\013\ufff4\001\002\000\022\003\027" +
    "\004\012\007\017\010\025\014\023\015\032\016\030\017" +
    "\034\001\002\000\006\003\121\031\120\001\002\000\024" +
    "\002\000\003\027\004\012\007\017\010\025\014\023\015" +
    "\032\016\030\017\034\001\002\000\024\002\uffec\003\uffec" +
    "\004\uffec\007\uffec\010\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\001\002\000\024\002\uffe5\003\uffe5\004\uffe5\007\uffe5" +
    "\010\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\001\002\000" +
    "\006\003\uffc7\031\uffc7\001\002\000\024\002\uffed\003\uffed" +
    "\004\uffed\007\uffed\010\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\001\002\000\006\003\056\031\055\001\002\000\024" +
    "\002\uffe7\003\uffe7\004\uffe7\007\uffe7\010\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\001\002\000\016\007\017\010\025" +
    "\014\023\015\032\016\030\017\034\001\002\000\006\003" +
    "\uffc5\031\uffc5\001\002\000\006\003\036\031\035\001\002" +
    "\000\006\003\uffc6\031\uffc6\001\002\000\024\002\uffe9\003" +
    "\uffe9\004\uffe9\007\uffe9\010\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\001\002\000\006\003\uffc4\031\uffc4\001\002\000" +
    "\012\005\044\006\042\033\045\034\037\001\002\000\026" +
    "\002\uffc8\003\uffc8\004\uffc8\007\uffc8\010\uffc8\011\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\001\002\000\010\032\uffde" +
    "\035\uffde\036\uffde\001\002\000\006\032\uffc1\035\uffc1\001" +
    "\002\000\004\035\050\001\002\000\010\032\uffdd\035\uffdd" +
    "\036\uffdd\001\002\000\004\032\046\001\002\000\010\032" +
    "\uffdc\035\uffdc\036\uffdc\001\002\000\006\032\uffc2\035\uffc2" +
    "\001\002\000\004\036\047\001\002\000\026\002\uffc9\003" +
    "\uffc9\004\uffc9\007\uffc9\010\uffc9\011\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\001\002\000\012\005\044\006\042\033" +
    "\045\034\037\001\002\000\004\032\uffc3\001\002\000\024" +
    "\002\uffe4\003\uffe4\004\uffe4\007\uffe4\010\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\001\002\000\024\002\uffe6\003\uffe6" +
    "\004\uffe6\007\uffe6\010\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\001\002\000\024\002\uffe8\003\uffe8\004\uffe8\007\uffe8" +
    "\010\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\001\002\000" +
    "\004\034\071\001\002\000\016\007\017\010\025\014\023" +
    "\015\032\016\030\017\034\001\002\000\022\003\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\001\002\000\022\003\uffcf\007\uffcf\010\uffcf\011\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\001\002\000\020\007\017" +
    "\010\025\011\065\014\023\015\032\016\030\017\034\001" +
    "\002\000\022\003\uffce\007\uffce\010\uffce\011\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\001\002\000\022\003\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\001\002\000\022\003\uffcc\007\uffcc\010\uffcc\011\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\001\002\000\004\010\067" +
    "\001\002\000\022\003\uffca\007\uffca\010\uffca\011\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\001\002\000\004\036\070" +
    "\001\002\000\026\002\uffbe\003\uffbe\004\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\001\002" +
    "\000\016\021\111\022\113\023\110\024\106\025\107\030" +
    "\105\001\002\000\004\032\073\001\002\000\020\003\074" +
    "\007\017\010\025\014\023\015\032\016\030\017\034\001" +
    "\002\000\004\011\102\001\002\000\022\003\076\007\017" +
    "\010\025\011\077\014\023\015\032\016\030\017\034\001" +
    "\002\000\026\002\uffbd\003\uffbd\004\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\001\002\000" +
    "\004\010\100\001\002\000\004\036\101\001\002\000\026" +
    "\002\uffc0\003\uffc0\004\uffc0\007\uffc0\010\uffc0\011\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\001\002\000\004\010\103" +
    "\001\002\000\004\036\104\001\002\000\026\002\uffbf\003" +
    "\uffbf\004\uffbf\007\uffbf\010\uffbf\011\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\001\002\000\012\005\uffd2\006\uffd2\033" +
    "\uffd2\034\uffd2\001\002\000\012\005\uffd3\006\uffd3\033\uffd3" +
    "\034\uffd3\001\002\000\012\005\uffd4\006\uffd4\033\uffd4\034" +
    "\uffd4\001\002\000\012\005\uffd6\006\uffd6\033\uffd6\034\uffd6" +
    "\001\002\000\012\005\uffd7\006\uffd7\033\uffd7\034\uffd7\001" +
    "\002\000\012\005\044\006\042\033\115\034\037\001\002" +
    "\000\012\005\uffd5\006\uffd5\033\uffd5\034\uffd5\001\002\000" +
    "\006\032\uffd9\036\uffd9\001\002\000\006\032\uffd8\036\uffd8" +
    "\001\002\000\024\002\uffeb\003\uffeb\004\uffeb\007\uffeb\010" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\001\002\000\024" +
    "\002\uffea\003\uffea\004\uffea\007\uffea\010\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\001\002\000\004\034\127\001\002" +
    "\000\016\007\017\010\025\014\023\015\032\016\030\017" +
    "\034\001\002\000\022\003\123\007\017\010\025\011\124" +
    "\014\023\015\032\016\030\017\034\001\002\000\026\002" +
    "\uffe0\003\uffe0\004\uffe0\007\uffe0\010\uffe0\011\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\001\002\000\004\007\125\001" +
    "\002\000\004\036\126\001\002\000\026\002\uffe1\003\uffe1" +
    "\004\uffe1\007\uffe1\010\uffe1\011\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\001\002\000\004\020\154\001\002\000\004" +
    "\036\131\001\002\000\004\034\071\001\002\000\004\036" +
    "\133\001\002\000\004\034\134\001\002\000\006\026\151" +
    "\027\150\001\002\000\004\032\136\001\002\000\020\003" +
    "\137\007\017\010\025\014\023\015\032\016\030\017\034" +
    "\001\002\000\004\011\145\001\002\000\022\003\141\007" +
    "\017\010\025\011\142\014\023\015\032\016\030\017\034" +
    "\001\002\000\026\002\uffdf\003\uffdf\004\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\001\002" +
    "\000\004\007\143\001\002\000\004\036\144\001\002\000" +
    "\026\002\uffe3\003\uffe3\004\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\001\002\000\004\007" +
    "\146\001\002\000\004\036\147\001\002\000\026\002\uffe2" +
    "\003\uffe2\004\uffe2\007\uffe2\010\uffe2\011\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\001\002\000\004\027\153\001\002" +
    "\000\004\026\152\001\002\000\004\032\uffd0\001\002\000" +
    "\004\032\uffd1\001\002\000\012\005\044\006\042\033\156" +
    "\034\037\001\002\000\004\036\uffdb\001\002\000\004\036" +
    "\uffda\001\002\000\024\002\uffff\003\027\004\012\007\017" +
    "\010\025\014\023\015\032\016\030\017\034\001\002\000" +
    "\006\035\ufff1\036\ufff1\001\002\000\010\020\166\035\uffee" +
    "\036\uffee\001\002\000\006\035\163\036\164\001\002\000" +
    "\004\034\161\001\002\000\030\002\ufff3\003\ufff3\004\ufff3" +
    "\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\001\002\000\006\035\ufff2\036\ufff2\001\002" +
    "\000\012\005\044\006\042\033\170\034\037\001\002\000" +
    "\006\035\uffef\036\uffef\001\002\000\006\035\ufff0\036\ufff0" +
    "\001\002\000\022\003\ufffd\004\ufffd\007\ufffd\010\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\001\002\000\022\003\ufffe" +
    "\004\ufffe\007\ufffe\010\ufffe\014\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\001\002\000\004\002\001\001\002\000\004\036\175" +
    "\001\002\000\024\003\ufff6\004\ufff6\007\ufff6\010\ufff6\012" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\001\002\000\004" +
    "\035\213\001\002\000\004\020\210\001\002\000\004\020" +
    "\205\001\002\000\004\035\202\001\002\000\004\006\177" +
    "\001\002\000\004\036\204\001\002\000\024\003\ufffc\004" +
    "\ufffc\007\ufffc\010\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\001\002\000\006\033\207\034\206\001\002\000" +
    "\006\035\ufff9\036\ufff9\001\002\000\006\035\ufffa\036\ufffa" +
    "\001\002\000\006\033\212\034\211\001\002\000\006\035" +
    "\ufff7\036\ufff7\001\002\000\006\035\ufff8\036\ufff8\001\002" +
    "\000\004\005\200\001\002\000\004\036\215\001\002\000" +
    "\024\003\ufffb\004\ufffb\007\ufffb\010\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\016\003\005\006\007\012\013\014\012\015" +
    "\010\016\006\001\001\000\006\007\200\010\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\171\001" +
    "\001\000\002\001\001\000\004\016\170\001\001\000\006" +
    "\005\161\013\157\001\001\000\020\004\156\006\020\011" +
    "\023\017\032\025\025\026\030\031\021\001\001\000\012" +
    "\006\014\014\015\015\010\016\006\001\001\000\002\001" +
    "\001\000\020\004\017\006\020\011\023\017\032\025\025" +
    "\026\030\031\021\001\001\000\002\001\001\000\016\006" +
    "\115\011\116\017\032\025\025\026\030\031\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\053\025\052\026\030\031\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\037\027\042\030\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\037\030\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\071\001\001\000\014\017\061\020\060\025" +
    "\057\026\030\031\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\065\025\063\026\030\031\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\111\001\001\000\002\001\001" +
    "\000\014\017\061\020\074\025\057\026\030\031\056\001" +
    "\001\000\002\001\001\000\012\017\065\025\063\026\030" +
    "\031\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\127\001\001\000\014\017\061\020\121\025" +
    "\057\026\030\031\056\001\001\000\012\017\065\025\063" +
    "\026\030\031\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\131\001\001\000\002\001" +
    "\001\000\004\024\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\061\020\137\025\057\026\030\031" +
    "\056\001\001\000\002\001\001\000\012\017\065\025\063" +
    "\026\030\031\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\115\011\116\017\032\025\025\026\030\031\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\213\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SokoParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SokoParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SokoParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SokoPieces[][] mappa=null;

	public static int syntax_error = 0;
	public static int semantic_error = 0;
	boolean error=false;
	public int blocchiMobili=0;
    private StringBuffer errList=new StringBuffer();
    
	public void syntax_error(Symbol sym) {
		StringBuffer m = new StringBuffer("Syntax Error");
		if (sym.left != -1) {
			m.append(" (line " + (sym.left+1));   
			m.append(", column " + (sym.right+1) + ")");
		}
		m.append("\n"+sym.value );
		System.err.println(m);
	}  

	public void report_error(String message, Object info) {
		//StringBuffer m = new StringBuffer("Error");
		errList.append("\nError");
		errList.append(": " + message);
		if (info != null) {
			errList.append(" (line " + (((java_cup.runtime.Symbol) info).left + 1) + ")");
		}
		//System.err.println(m);
	}
	
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}
	public SokoPieces[][] getMap(){
		return mappa;
	}
	
	public boolean HasError(){
		return error;
	}
	public StringBuffer getErrList(){
		return errList;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SokoParserCup$actions {


	Map<String, Integer> varMap = new HashMap<String, Integer>();
	
	
	
	int SemanticErrorNumber=0;
	
			
	//ArrayList<ListaAzioni> listaAzioniTot=new ArrayList<ListaAzioni>();

	


  private final SokoParserCup parser;

  /** Constructor */
  CUP$SokoParserCup$actions(SokoParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SokoParserCup$do_action(
    int                        CUP$SokoParserCup$act_num,
    java_cup.runtime.lr_parser CUP$SokoParserCup$parser,
    java.util.Stack            CUP$SokoParserCup$stack,
    int                        CUP$SokoParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SokoParserCup$result;

      /* select the action based on the action number */
      switch (CUP$SokoParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sezioneIF ::= IF TO termine TC contenuto error 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		 
					parser.report_error("Syntax error in IF section",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
					parser.error=true; 
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("sezioneIF",23, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sezioneIF ::= IF error contenuto END IF PV 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).value;
		 
					parser.report_error("Syntax error in IF section",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
					parser.error=true; 
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("sezioneIF",23, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sezioneIF ::= IF TO termine TC error END IF PV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).value;
		 
					parser.report_error("Error in IF section",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
					parser.error=true; 
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("sezioneIF",23, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sezioneIF ::= IF TO termine TC contenuto END IF PV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).value;
		
					if (t!=null && c!=null){
						AzioneIf ai = new AzioneIf();
						ai.cond=(Condizione)t;
						ai.la=(ListaAzioni)c;
						RESULT = ai;
					}
					else{
						//parser.report_error("IF section Error",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						//parser.error=true;
						RESULT = null;
					}
						
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("sezioneIF",23, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // coordinata ::= myID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 
					//System.out.println("_"+(String)t);
					//if(varMap.containsKey((String)t) && varMap.get((String)t)!=null)
						RESULT=t;
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("coordinata",22, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // coordinata ::= INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=t; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("coordinata",22, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // coppia ::= coordinata VIR coordinata 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
				RESULT=new AzionePiazzamento(t1,t2);
			
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("coppia",21, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo ::= SOKO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("tipo",20, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo ::= GOAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("tipo",20, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo ::= FISSI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("tipo",20, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo ::= MOB 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("tipo",20, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // piazzamento ::= tipo error 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		 
					
					parser.report_error("Placement syntax error",(java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
					parser.error=true;
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("piazzamento",19, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // piazzamento ::= tipo TO coppia TC PV 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		
					/*System.err.println("LINE "+ 
							((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right+
							((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value);*/
					if(cp!=null)
						((AzionePiazzamento)cp).setType(t1);						
					RESULT=cp;
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("piazzamento",19, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenuto ::= contenuto cicloFor 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					if(f==null || c==null){
						//parser.report_error("FOR loop Error",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
						RESULT=null;
					}
					else{
						((ListaAzioni)c).AddAzione(f);
						RESULT=c;
					}
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("contenuto",14, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenuto ::= contenuto sezioneIF 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					if(i==null || c==null){
						//parser.report_error("IF section Error",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
						RESULT=null;
					}
					else{
						((ListaAzioni)c).AddAzione(i);
						RESULT=c;
					}
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("contenuto",14, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenuto ::= contenuto piazzamento 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					if(p==null || c==null){
						//parser.report_error("PLACEMENT Error",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
						RESULT=null;
					}
					else{
						((ListaAzioni)c).AddAzione(p);
						RESULT=c;
					}
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("contenuto",14, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenuto ::= sezioneIF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					if(i==null){
						//parser.report_error("IF section Error",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
						RESULT=null;
					}
					else
						RESULT=new ListaAzioni(i);
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("contenuto",14, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenuto ::= cicloFor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					if(f==null){
						//parser.report_error("FOR loop Error",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
						RESULT=null;
					}
					else
						RESULT=new ListaAzioni(f);
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("contenuto",14, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenuto ::= piazzamento 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					if(p==null){
						//parser.report_error("Placement Error",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
						RESULT=null;
					}
					else
						RESULT=new ListaAzioni(p);
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("contenuto",14, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // avanzamento ::= ID MENO MENO 
            {
              Object RESULT =null;
		 RESULT=new Boolean(false); 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("avanzamento",18, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // avanzamento ::= ID PIU PIU 
            {
              Object RESULT =null;
		 RESULT=new Boolean(true); 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("avanzamento",18, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // segno ::= DIVERSO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("segno",17, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // segno ::= MIN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("segno",17, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // segno ::= MAG 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("segno",17, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // segno ::= MINUG 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("segno",17, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // segno ::= MAGUG 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("segno",17, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // segno ::= UGUALEUGUALE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=s; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("segno",17, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termine ::= ID segno INT 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
				if(!varMap.containsKey((String)id1)){
					//parser.report_error(Result.UndefinedVariable.name(),null);
					parser.report_error("Undefined variable "+id1+" ",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
					parser.error=true;	
					RESULT=null;
				}
				else 
					RESULT=new Condizione(id1,id2,s);	
				
			
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("termine",16, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termine ::= ID segno myID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
				if(!varMap.containsKey((String)id1)){
					//parser.report_error(Result.UndefinedVariable.name()+" "+id1,null);
					parser.report_error("Undefined variable "+id1+" ",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
					parser.error=true;
					RESULT=null;
				}
				else if(!varMap.containsKey((String)id2)){
					//parser.report_error(Result.UndefinedVariable.name()+" "+id2,null);
					parser.report_error("Undefined variable "+id2+" ",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
					parser.error=true;
					RESULT=null;
				}
				else 
					RESULT=new Condizione(id1,id2,s);
	
			
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("termine",16, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assegnazione ::= ID UGUALE INT 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					if (varMap.containsKey(id1) ) 
						RESULT=new Assegnazione(id1, id2);
					else{
						parser.report_error("Undefined variable "+id1+" ",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						//parser.report_error(Result.UndefinedVariable.name()+" "+id1,null);
						parser.error=true;
						RESULT=null;
					} 
						
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("assegnazione",15, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assegnazione ::= ID UGUALE myID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					if (!varMap.containsKey(id1)){
						//parser.report_error(Result.UndefinedVariable.name()+" "+id1,null);
						parser.report_error("Undefined variable "+id1+" ",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
						RESULT=null;
					}
					else if (!varMap.containsKey(id2)){
						//parser.report_error(Result.UndefinedVariable.name()+" "+id2,null);
						parser.report_error("Undefined variable "+id2+" ",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
						RESULT=null;
					}
					else
						RESULT=new Assegnazione(id1, id2);
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("assegnazione",15, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // myID ::= HEIGHT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=id; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("myID",0, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // myID ::= WIDTH 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=id; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("myID",0, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // myID ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=id; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("myID",0, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cicloFor ::= FOR TO assegnazione PV termine PV avanzamento TC contenuto error 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		 
					parser.report_error("Error in FOR section",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
					parser.error=true; 
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("cicloFor",13, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cicloFor ::= FOR error contenuto error 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		 
					parser.report_error("Error in FOR section",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
					parser.error=true; 
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("cicloFor",13, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cicloFor ::= FOR error contenuto END FOR PV 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).value;
		 
					parser.report_error("Error in FOR section",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
					parser.error=true; 
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("cicloFor",13, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cicloFor ::= FOR TO assegnazione PV termine PV avanzamento TC error END FOR PV 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-9)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-9)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).value;
		 
					parser.report_error("Error in FOR section",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
					parser.error=true; 
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("cicloFor",13, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-11)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cicloFor ::= FOR TO assegnazione PV termine PV avanzamento TC contenuto END FOR PV 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-9)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-9)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-7)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).value;
		
					if (as==null || c==null || t==null){
						//parser.report_error("For null",null);
						parser.error=true;
						RESULT = null;
					}
					else{
						AzioneFor azione=new AzioneFor();
						azione.var=((Assegnazione)as).id1;
						azione.start=element.traduci(((Assegnazione)as).id2, varMap);
						azione.cond=(Condizione)t;
						azione.incremento=(Boolean)av;
						azione.la=(ListaAzioni)c;
						RESULT = azione;
					}
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("cicloFor",13, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-11)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // corpo ::= error sezioneIF 
            {
              Object RESULT =null;
		
				parser.report_error("Syntax error before if section",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
				parser.error=true;
				RESULT=null;
			
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("corpo",7, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // corpo ::= sezioneIF 
            {
              Object RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object si = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
				if(si!=null){
					AzioneIf ai=(AzioneIf)si;
					MapAndResult mar=ai.executeAction(varMap, parser.mappa);
					if (mar.result!=Result.OK){
						parser.error=true;
						parser.report_error(mar.ErrMsg,CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						SemanticErrorNumber++;
						RESULT=null;
					}
					else{
						parser.mappa=mar.mappa;
						RESULT=1;
					}
				}
				else{
					//parser.report_error("If section null",null);
					parser.error=true;
					RESULT=null;
				}
			
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("corpo",7, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // corpo ::= error piazzamento 
            {
              Object RESULT =null;
		
				parser.report_error("Syntax error before placement",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
				parser.error=true;
				RESULT=null;
			
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("corpo",7, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // corpo ::= piazzamento 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 
				if(p!=null){
					AzionePiazzamento ap=(AzionePiazzamento)p;
					MapAndResult mar=ap.executeAction(varMap, parser.mappa);
					if (mar.result!=Result.OK){
						parser.error=true;
						parser.report_error(mar.ErrMsg,CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						SemanticErrorNumber++;
						RESULT=null;
					}
					else{
						parser.mappa=mar.mappa;
						RESULT=1;
					}
				}
				else{
					//parser.report_error("Placement null",null);
					parser.error=true;
					RESULT=null;
				}
			
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("corpo",7, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // corpo ::= error cicloFor 
            {
              Object RESULT =null;
		
				parser.report_error("Syntax error before for loop",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
				parser.error=true;
				RESULT=null;
			
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("corpo",7, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // corpo ::= cicloFor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
				if (f!=null){
					MapAndResult mar=((AzioneFor)f).executeAction(varMap, parser.mappa);
					if (mar.result!=Result.OK){
						parser.error=true;
						parser.report_error(mar.ErrMsg,CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						SemanticErrorNumber++;
						RESULT=null;
					}
					else{
						parser.mappa=mar.mappa;
						RESULT=1;
					}
				}
				else{
					//parser.report_error("For cicle null",null);
					parser.error=true;
					RESULT=null;
				}
			
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("corpo",7, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // part ::= part corpo 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 if(c==null || s==null) c=null; RESULT=c;  
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("part",2, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // part ::= part elemento 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 if(c==null || s==null) c=null; RESULT=c; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("part",2, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // part ::= elemento 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=c; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("part",2, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // part ::= corpo 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 RESULT=c; 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("part",2, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // definizione ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					System.out.println((String)i);
					if (varMap.containsKey((String)i)){
						parser.report_error("Variable "+(String)i+" already defined ",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
					}
					else 
						varMap.put((String)i, null);
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("definizione",9, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definizione ::= ID UGUALE myID 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					System.out.println((String)i1+"="+(String)i2);
					if (varMap.containsKey((String)i1)){
						parser.report_error("Variable "+(String)i1+" already defined ",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
					}
					else if(varMap.containsKey((String)i2) && varMap.get((String)i2)!=null)
						varMap.put((String)i1, varMap.get((String)i2) );
					else{
						parser.report_error("Undefined variable "+(String)i1+" ",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
					}
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("definizione",9, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // definizione ::= ID UGUALE INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		 
					System.out.println((String)i+"="+(Integer)n);
					if (varMap.containsKey((String)i)){
						parser.report_error("Variable "+(String)i+" already defined ",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
					}
					else
						varMap.put((String)i, (Integer)n);
					

				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("definizione",9, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def ::= definizione 
            {
              Object RESULT =null;

              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("def",3, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def ::= def VIR definizione 
            {
              Object RESULT =null;

              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("def",3, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // elemento ::= VAR def PV 
            {
              Object RESULT =null;
		
					if (parser.error==true){
						parser.report_error("Declaration error",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						SemanticErrorNumber++;
						RESULT=null;
					}
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("elemento",4, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // definizioni ::= definizioni elemento 
            {
              Object RESULT =null;

              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("definizioni",8, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definizioni ::= elemento 
            {
              Object RESULT =null;

              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("definizioni",8, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // numBlocchi ::= NMOB INT PV 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		 parser.blocchiMobili=((Integer)i).intValue(); 
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("numBlocchi",11, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // larghezza ::= WIDTH UGUALE ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					if(varMap.containsKey((String)i) && varMap.get((String)i)!=null)
				 		RESULT=varMap.get((String)i);
					else
						RESULT = null;
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("larghezza",6, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // larghezza ::= WIDTH UGUALE INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
					RESULT=i;
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("larghezza",6, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // altezza ::= HEIGHT UGUALE ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
				if(varMap.containsKey(i) && varMap.get(i)!=null)
					RESULT=varMap.get(i);
				else
					RESULT = null;
			
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("altezza",5, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // altezza ::= HEIGHT UGUALE INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.peek()).value;
		
				RESULT=i;
			
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("altezza",5, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dimBlocchi ::= DIM larghezza VIR altezza PV 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		
					if (a!= null && l!=null){
						int h=((Integer)a).intValue();
						int w=((Integer)l).intValue();
						
						varMap.put(new String("h"), (Integer)a);
						varMap.put(new String("w"), (Integer)l);
						parser.mappa=new SokoPieces[h][w];
						for(int k=0;k<h;k++)
							for(int j=0;j<w;j++)
								parser.mappa[k][j]=SokoPieces.floor;
						System.out.println("mappa.len="+parser.mappa.length+"-mappa[0].len="+parser.mappa[0].length);
					}
					else{
						parser.report_error("Dimension declaration error",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
					}
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("dimBlocchi",12, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dimBlocchi ::= DIM altezza VIR larghezza PV 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		
					if (a!= null && l!=null){ 
						int h=((Integer)a).intValue();
						int w=((Integer)l).intValue();
						varMap.put(new String("h"), (Integer)a);
						varMap.put(new String("w"), (Integer)l);
						parser.mappa=new SokoPieces[h][w];
						for(int k=0;k<h;k++)
							for(int j=0;j<w;j++)
								parser.mappa[k][j]=SokoPieces.floor;
						System.out.println("mappa.len="+parser.mappa.length+"-mappa[0].len="+parser.mappa[0].length);
					}
					else{
						parser.report_error("Dimension declaration error",CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top));
						parser.error=true;
					}
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("dimBlocchi",12, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dichiar ::= numBlocchi dimBlocchi 
            {
              Object RESULT =null;

              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("dichiar",10, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dichiar ::= dimBlocchi numBlocchi 
            {
              Object RESULT =null;

              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("dichiar",10, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // map ::= dichiar part 
            {
              Object RESULT =null;
		
					if(!parser.error){
						System.out.println("ok terminato");
					}
					else
						System.out.println("NOT OK terminato");
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("map",1, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // map ::= definizioni dichiar part 
            {
              Object RESULT =null;
		
					if(!parser.error){
						System.out.println("ok terminato");
					}
					else
						System.out.println("NOT OK terminato");
				
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("map",1, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          return CUP$SokoParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= map EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)).value;
		RESULT = start_val;
              CUP$SokoParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.elementAt(CUP$SokoParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$SokoParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SokoParserCup$parser.done_parsing();
          return CUP$SokoParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

