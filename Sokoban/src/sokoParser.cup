package Generated; 

import java.util.*;

import java_cup.runtime.*;
import source.SokoPieces.*;
import source.AzionePiazzamento;
import source.SokoPieces;
import source.ListaAzioni;
 


parser code
{:
	public static int syntax_error = 0;
	public static int semantic_error = 0;

	public void syntax_error(Symbol sym) {
		StringBuffer m = new StringBuffer("Syntax Error");

		if (sym.left != -1) {
			m.append(" (line " + (sym.left+1));   
			m.append(", column " + (sym.right+1) + ") ");
		}
		System.err.print(m);
	}

	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer("Error");
		m.append(" : " + message);
		if (info != null) {
			m.append(" (line " + (((java_cup.runtime.Symbol) info).left + 1) + ")");
		}
		System.err.println(m);
	}
	
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}
:}

action code
{:
	Map<String, Integer> varMap = new HashMap<String, Integer>();
	
	SokoPieces[][] mappa=null;
	
	ArrayList<ListaAzioni> listaAzioni=new ArrayList<ListaAzioni>();

:}


terminal 	VAR, HEIGHT, WIDTH, FOR, IF, END, DIM, NMOB, MOB, FISSI, GOAL, SOKO, UGUALE, MINUG, MAGUG, INCR, DECR, DIVERSO, 			TO, TC, INT, ID, VIR, PV;

non terminal 	map, part, def, elemento, altezza, larghezza, corpo, definizioni,  definizione, dichiar, numBlocchi, dimBlocchi,
		cicloFor, contenuto, assegnazione, termine, segno, avanzamento, piazzamento, tipo, coppia, coordinata, sezioneIF;

start with map;

 
map 	::= 	definizioni dichiar part {:System.out.println("map"); :}| 
		dichiar part 
		{:System.out.println("map"); :} /*|
		error {: parser.report_error("map errore",null); :}*/;
 
dichiar	::=	dimBlocchi numBlocchi {:System.out.println("dichiar1__"); :}| 		// #Dimensioni h=height, w=width;
		numBlocchi dimBlocchi {:System.out.println("dichiar2__"); :};		// #BlocchiMobili 5;

dimBlocchi ::= 	DIM altezza VIR larghezza PV {:System.out.println("dimBlocchi__"); :}|
		DIM larghezza VIR altezza PV {:System.out.println("dimBlocchi__"); :};
altezza	::=	HEIGHT UGUALE INT |
		HEIGHT UGUALE ID ;
larghezza ::=	WIDTH UGUALE INT |
		WIDTH UGUALE ID ;
		

numBlocchi ::=	NMOB INT PV ;

definizioni ::=	elemento |
		definizioni elemento {:System.out.println("definizioni__"); :}/* |
		error {: parser.report_error("defini errore",null); :}*/;

elemento ::= 	VAR def PV ;	// definizioni di varabili

def	::=	def VIR definizione |
		definizione /*|
		error {: parser.report_error("def errore",null); :}*/;

definizione ::= ID UGUALE INT {:System.out.println("definizione1__"); :}|
		ID UGUALE ID {:System.out.println("definizione2__"); :}|
		ID {:System.out.println("definizione3__"); :};

part	::=	corpo |
		elemento | 
		part elemento |
		part corpo /*|
		part error {: parser.report_error("part errore",null); :}*/;

corpo 	::=	cicloFor {:System.out.println("corpo__"); :}|
		piazzamento {:System.out.println("corpo__"); :}|
		sezioneIF {:System.out.println("corpo__"); :}/*|
		error {: parser.report_error("corpo errore",null); :}*/;

cicloFor ::=	FOR TO assegnazione PV termine PV avanzamento TC contenuto END FOR PV  {:System.out.println("cicloFor"); :}/*|
				FOR error {: parser.report_error("for errore",null); :}*/;
assegnazione::=	ID UGUALE ID |
		ID UGUALE INT ;
termine	::=	ID segno ID |
		ID segno INT ;
segno	::=	UGUALE UGUALE |
		MAGUG |
		MINUG |
		DIVERSO ;
avanzamento ::=	ID INCR |
		ID DECR ;  		/*possibile ampliamento con espressioni matematiche */

contenuto ::=	piazzamento /*creo lista azioni */| 
		cicloFor /*creo lista azioni */|
		sezioneIF /*creo lista azioni */|
		contenuto piazzamento /*aggiungo a lista azioni */|
		contenuto sezioneIF /*aggiungo a lista azioni */|
		contenuto cicloFor /*aggiungo a lista azioni *//*|
		error {: parser.report_error("contenuto errore",null); :}|
		contenuto error {: parser.report_error("contenuto errore",null); :}*/;

piazzamento ::=	tipo:t1 TO coppia:cp TC PV  {:
							
	:} /*| 
				tipo TO coppia TC error {: parser.report_error("piazzamento errore",null); :}|
				tipo error {: parser.report_error("piazzamento errore",null); :}|
				tipo TO error TC PV {: parser.report_error("piazzamento errore",null); :}*/
				;
tipo ::=	MOB |
		FISSI |
		GOAL | 
		SOKO ;
coppia ::=	coordinata:t1 VIR coordinata:t2{: 
											RESULT=new AzionePiazzamento(t1,t2);
											 :} /*|
			coordinata error 
		 			{: parser.report_fatal_error("coppia errore",null); :}|
			error coordinata 
					{: parser.report_fatal_error("coppia errore",null); :}*/;
					
coordinata ::=	INT:t {: RESULT=t; :} |
		ID:t {: RESULT=t; :};

sezioneIF ::= IF TO ID segno coordinata TC contenuto END IF PV {:System.out.println("sezioneIF"); :}/*|
				IF error {: parser.report_error("sezione if errore",null); :}*/;








